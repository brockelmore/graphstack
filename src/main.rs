use std::io::Write;
use crate::inspector::*;
use ethers::types::*;
use revm::{Bytecode, Env, InMemoryDB, TransactTo, EVM};

pub mod inspector;
pub mod i256;
pub mod arithmetic;

fn main() {
    let from = Address::random();

    let code_addr = Address::random();

    let inc_dec_reset_get = hex::decode("608060409080825260048036101561001657600080fd5b600091823560e01c908163799320bb1461082d575063c64b3bb51461003a57600080fd5b3461082957602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108255780359267ffffffffffffffff90818511610822573660238601121561082257848301359182116108225760248086019136828589010111610822576100b2602a851461086a565b83156107f9577fff00000000000000000000000000000000000000000000000000000000000000967f50000000000000000000000000000000000000000000000000000000000000008885351614806107c1575b80610789575b80610751575b806106ed575b610122915061086a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff968785018581116106c2576101869161017e7f7d000000000000000000000000000000000000000000000000000000000000009288886108cf565b35161461086a565b61018e610959565b95815b60068082101561028f57835b8181106101b45750506101af9061098d565b610191565b828b04821183151516610264578183026005818101918282116102395783010180911161020e57908a610203826101fd876101f3610209978f8f6108cf565b3560f81c946109e9565b516109e9565b5261098d565b61019d565b868660118c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b888860118e7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b858560118b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b838b848b8861029c61090a565b8080808080966102aa61090a565b9860be8a52808a01609a90528a8a0160c29052606097888b01526080998a8101607f905260a090818101604d905284526102e261090a565b6059815260de83820152603b8d82015260618a820152600a8c820152601a828201528483015261031061090a565b60c8815260188382015260968d820152600e8a82015260948c820152604d82820152848d015261033e61090a565b60e38152606483820152608c8d820152606d8a82015260768c82015260fe82820152848a015261036c61090a565b6016815260d18382015260418d820152608e8a820152600e8c820152605082820152848c015261039a61090a565b60e7815260428382015260a48d82015260878a820152608e8c820152606b82820152848201528a6103c961090a565b998d6103d361090a565b6023815260ab86820152601e91810191909152604c8282015260e983820152600e848201528b528d61040361090a565b60ef815260538682015260b49181019190915260ac8282015260188382015260b1848201528b8501528d61043561090a565b603c815260c286820152602f82820152603483820152604a84820152601885820152908c01528d61046461090a565b6065815260948682015260679181019190915260d3828201526059838201526029848201528b8201528d61049661090a565b848152602786820152604a9181019190915260738282015260cd838201526088848201528b8301528d6104c761090a565b90605e82528582016032905281016050905284828201528280820152838101600e9052838c01528d6104f761090a565b9d8e61050161090a565b606280825288820152602d84820152605785820152608283820152602a87820152815261052c61090a565b60c8815260b888820152606b84820152606685820152608b838201526019878201528188015261055a61090a565b60498152608b88820152603a8482015260888582015260d9838201526081878201528184015261058861090a565b60db808252601589830152606b8583015260cc8683015260128483015287820152818501526105b561090a565b6091815260c08882015260119381019390935260568484015260a68284015260d98684015201526105e461090a565b9360288552840160f890528d8401602b90528301604790528201605d905280820160e290528a01526106169087610afd565b9061062091610a77565b61062a9086610afd565b9061063491610a77565b61063e9085610afd565b9061064891610a77565b6106529084610afd565b9061065c91610a77565b6106669083610afd565b9061067091610a77565b61067991610afd565b9061068391610a77565b9061068d916109fa565b6106969061086a565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117825551f35b50506011857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5084861015610727577f7b000000000000000000000000000000000000000000000000000000000000008860286101229301351614610118565b506032857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b508460031015610727577f46000000000000000000000000000000000000000000000000000000000000008860278301351614610112565b508460021015610727577f5400000000000000000000000000000000000000000000000000000000000000886026830135161461010c565b508460011015610727577f43000000000000000000000000000000000000000000000000000000000000008860258301351614610106565b6032857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b80fd5b8280fd5b5080fd5b83903461082957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108295760ff602092541615158152f35b1561087157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f696e76616c696420666c616700000000000000000000000000000000000000006044820152fd5b908210156108db570190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6040519060c0820182811067ffffffffffffffff82111761092a57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61096161090a565b9060005b60c090818110156109895760209161097b61090a565b903682378185015201610965565b5050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109ba5760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9060068110156108db5760051b0190565b60005b600680821015610a6e5760005b818110610a21575050610a1c9061098d565b6109fd565b60ff94929493919380610a38836101fd89876109e9565b511690610a49836101fd89886109e9565b511603610a6457610a599061098d565b939193929092610a0a565b5050505050600090565b50505050600190565b919091610a82610959565b50600092835b600680821015610af557855b818110610aab575050610aa69061098d565b610a88565b610af09060ff80610ac0836101fd888a6109e9565b511690610ae783610ad1888b6109e9565b519383610ade83876109e9565b511618936109e9565b9116905261098d565b610a94565b509193505050565b91610b06610959565b50610b0f610959565b9160005b600680821015610bdb5760005b818110610b37575050610b329061098d565b610b13565b60005b828110610b505750610b4b9061098d565b610b20565b60ff80610b61836101fd888d6109e9565b51169080610b73856101fd868b6109e9565b51166000925b828216610b9b57505090610b969291610ae785610ad1898d6109e9565b610b3a565b600190818316610bd2575b607f91906080811615610bc757901b60fe16601b18915b60011c1690610b79565b60fe911b1691610bbd565b93841893610ba6565b50505091509056fea26469706673582212200b4511eaab019ca7946e369790daa46e74aa589db616dc0377108cee6cadba0f64736f6c63430008100033").expect("bad hex");

    let mut data = [0u8; 4+32+42];
    data[0] = 0xc6;
    data[1] = 0x4b;
    data[2] = 0x3b;
    data[3] = 0xb5;
    data[35] = 36+6;
    data[36] = 0x2a;
    let tx = TransactionRequest::new()
        .from(from)
        .to(code_addr)
        .value(0)
        .data(ethers::types::Bytes::from(data.to_vec()))
        .nonce(0);

    // give some $ to the user
    // TODO: Replace this with the ErigonDB
    let mut db = InMemoryDB::default();
    db.insert_account_info(
        from,
        revm::AccountInfo {
            balance: 1000000000000000u128.into(),
            nonce: 0,
            ..Default::default()
        },
    );

    db.insert_account_info(
        code_addr,
        revm::AccountInfo {
            balance: 1000000000000000u128.into(),
            nonce: 0,
            code: Some(Bytecode::new_raw(inc_dec_reset_get.clone().into())),
            ..Default::default()
        },
    );

    let mut evm = EVM::new();
    evm.database(&db);
    let env = Env {
        tx: revm::TxEnv {
            caller: tx.from.unwrap(),
            value: tx.value.unwrap_or(U256::zero()),
            transact_to: TransactTo::Call(match tx.to.as_ref().unwrap() {
                NameOrAddress::Address(inner) => *inner,
                _ => panic!(),
            }),
            data: bytes::Bytes::from(tx.data.unwrap().0),
            ..Default::default()
        },
        ..Default::default()
    };

    evm.env = env;

    // add recorder inspector
    let mut inspector = OpsGraph::default();
    let (execution_result, _tx_changeset) = evm.inspect_ref(&mut inspector);
    println!("{:?}", execution_result);
    let mut file = std::fs::File::create("graph.dot").expect("bad fs open");
    file.write_all(inspector.stack_dot_str().as_bytes()).expect("bad file write");
    // println!("{}", inspector.backtrace_node(1919.into()));

    let mut file = std::fs::File::create("code_graph.dot").expect("bad fs open");
    file.write_all(inspector.code_dot_str().as_bytes()).expect("bad file write");

    inspector.conditions_for_jumps().iter().for_each(|(code, condition)| {
        println!("code block at: {}, {}", code, condition);
    });
    
}
