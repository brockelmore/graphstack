digraph {
    0 [ label = "Stack(0x80)" ]
    1 [ label = "Stack(0x40)" ]
    2 [ label = "Stack(0x80)" ]
    3 [ label = "Stack(0x40)" ]
    4 [ label = "Memory(FromStack { offset: NodeIndex(3), stack_elem: NodeIndex(2), one_byte: false })" ]
    5 [ label = "Stack(0x4)" ]
    6 [ label = "Stack(0x4)" ]
    7 [ label = "Stack(Intrinsic::CallDataSize)" ]
    8 [ label = "Stack(Intrinsic::CallDataSize)" ]
    9 [ label = "Stack(Intrinsic::CallDataSize)" ]
    10 [ label = "Stack(0x16)" ]
    11 [ label = "Code(0x16)" ]
    12 [ label = "Stack(0x0)" ]
    13 [ label = "Stack(0x0)" ]
    14 [ label = "Stack(Calldata[NodeIndex(13)])" ]
    15 [ label = "Stack(0xe0)" ]
    16 [ label = "Stack(Calldata[NodeIndex(13)])" ]
    17 [ label = "Stack(Calldata[NodeIndex(13)])" ]
    18 [ label = "Stack(0x799320bb)" ]
    19 [ label = "Stack(Calldata[NodeIndex(13)])" ]
    20 [ label = "Stack(0x82d)" ]
    21 [ label = "Code(0x82d)" ]
    22 [ label = "Stack(0xc64b3bb5)" ]
    23 [ label = "Stack(Calldata[NodeIndex(13)])" ]
    24 [ label = "Stack(0x3a)" ]
    25 [ label = "Code(0x3a)" ]
    26 [ label = "Stack(Intrinsic::CallValue)" ]
    27 [ label = "Stack(0x829)" ]
    28 [ label = "Code(0x829)" ]
    29 [ label = "Stack(0x20)" ]
    30 [ label = "Stack(0x20)" ]
    31 [ label = "Stack(0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc)" ]
    32 [ label = "Stack(Intrinsic::CallDataSize)" ]
    33 [ label = "Stack(Intrinsic::CallDataSize)" ]
    34 [ label = "Stack(Intrinsic::CallDataSize)" ]
    35 [ label = "Stack(0x825)" ]
    36 [ label = "Code(0x825)" ]
    37 [ label = "Stack(0x4)" ]
    38 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    39 [ label = "Stack(0xffffffffffffffff)" ]
    40 [ label = "Stack(0xffffffffffffffff)" ]
    41 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    42 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    43 [ label = "Stack(0x822)" ]
    44 [ label = "Code(0x822)" ]
    45 [ label = "Stack(Intrinsic::CallDataSize)" ]
    46 [ label = "Stack(0x23)" ]
    47 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    48 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    49 [ label = "Stack((Intrinsics: [CallDataSize], Calldata Offsets: [NodeIndex(37)]))" ]
    50 [ label = "Stack((Intrinsics: [CallDataSize], Calldata Offsets: [NodeIndex(37)]))" ]
    51 [ label = "Stack(0x822)" ]
    52 [ label = "Code(0x822)" ]
    53 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    54 [ label = "Stack(0x4)" ]
    55 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    56 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    57 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    58 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    59 [ label = "Stack(0x822)" ]
    60 [ label = "Code(0x822)" ]
    61 [ label = "Stack(0x24)" ]
    62 [ label = "Stack(0x24)" ]
    63 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    64 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    65 [ label = "Stack(Intrinsic::CallDataSize)" ]
    66 [ label = "Stack(0x24)" ]
    67 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    68 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    69 [ label = "Stack(Calldata[NodeIndex(37), NodeIndex(37)])" ]
    70 [ label = "Stack(Calldata[NodeIndex(37), NodeIndex(37)])" ]
    71 [ label = "Stack((Intrinsics: [CallDataSize], Calldata Offsets: [NodeIndex(37), NodeIndex(37)]))" ]
    72 [ label = "Stack(0x822)" ]
    73 [ label = "Code(0x822)" ]
    74 [ label = "Stack(0xb2)" ]
    75 [ label = "Stack(0x2a)" ]
    76 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    77 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    78 [ label = "Stack(0x86a)" ]
    79 [ label = "Code(0x86a)" ]
    80 [ label = "Stack(Calldata[NodeIndex(37)])" ]
    81 [ label = "Stack(0x871)" ]
    82 [ label = "Code(0x871)" ]
    83 [ label = "Stack(0x64)" ]
    84 [ label = "Stack(0x40)" ]
    85 [ label = "Stack(MemOps: SymMemOp { offset: NodeIndex(84), size: NodeIndex(0), mload: true })" ]
    86 [ label = "Stack(0x8c379a000000000000000000000000000000000000000000000000000000000)" ]
    87 [ label = "Stack(MemOps: SymMemOp { offset: NodeIndex(84), size: NodeIndex(0), mload: true })" ]
    88 [ label = "Memory(FromStack { offset: NodeIndex(87), stack_elem: NodeIndex(86), one_byte: false })" ]
    89 [ label = "Stack(0x20)" ]
    90 [ label = "Stack(0x4)" ]
    91 [ label = "Stack(MemOps: SymMemOp { offset: NodeIndex(84), size: NodeIndex(0), mload: true })" ]
    92 [ label = "Stack(MemOps: SymMemOp { offset: NodeIndex(84), size: NodeIndex(0), mload: true })" ]
    93 [ label = "Memory(FromStack { offset: NodeIndex(92), stack_elem: NodeIndex(89), one_byte: false })" ]
    94 [ label = "Stack(0xc)" ]
    95 [ label = "Stack(0x24)" ]
    96 [ label = "Stack(MemOps: SymMemOp { offset: NodeIndex(84), size: NodeIndex(0), mload: true })" ]
    97 [ label = "Stack(MemOps: SymMemOp { offset: NodeIndex(84), size: NodeIndex(0), mload: true })" ]
    98 [ label = "Memory(FromStack { offset: NodeIndex(97), stack_elem: NodeIndex(94), one_byte: false })" ]
    99 [ label = "Stack(0x696e76616c696420666c61670000000000000000000000000000000000000000)" ]
    100 [ label = "Stack(0x44)" ]
    101 [ label = "Stack(MemOps: SymMemOp { offset: NodeIndex(84), size: NodeIndex(0), mload: true })" ]
    102 [ label = "Stack(MemOps: SymMemOp { offset: NodeIndex(84), size: NodeIndex(0), mload: true })" ]
    103 [ label = "Memory(FromStack { offset: NodeIndex(102), stack_elem: NodeIndex(99), one_byte: false })" ]
    104 [ label = "Exit(Revert, MemOps: SymMemOp { offset: NodeIndex(84), size: NodeIndex(0), mload: true }, 0x64)" ]
    0 -> 2 [ label = "Duplicant" ]
    1 -> 3 [ label = "Duplicant" ]
    3 -> 4 [ label = "MstoreLoc" ]
    2 -> 4 [ label = "MstoreVal" ]
    5 -> 6 [ label = "Duplicant" ]
    7 -> 8 [ label = "LtLhs" ]
    6 -> 8 [ label = "LtRhs" ]
    8 -> 9 [ label = "IsZero" ]
    10 -> 11 [ label = "ConditionalJumpLoc" ]
    9 -> 11 [ label = "ConditionalJumpConditional" ]
    12 -> 13 [ label = "Duplicant" ]
    13 -> 14 [ label = "CalldataOffset" ]
    15 -> 16 [ label = "RShiftor" ]
    14 -> 16 [ label = "RShiftee" ]
    16 -> 17 [ label = "Duplicant" ]
    18 -> 19 [ label = "EqLhs" ]
    17 -> 19 [ label = "EqRhs" ]
    20 -> 21 [ label = "ConditionalJumpLoc" ]
    19 -> 21 [ label = "ConditionalJumpConditional" ]
    22 -> 23 [ label = "EqLhs" ]
    16 -> 23 [ label = "EqRhs" ]
    24 -> 25 [ label = "ConditionalJumpLoc" ]
    23 -> 25 [ label = "ConditionalJumpConditional" ]
    27 -> 28 [ label = "ConditionalJumpLoc" ]
    26 -> 28 [ label = "ConditionalJumpConditional" ]
    29 -> 30 [ label = "Duplicant" ]
    32 -> 33 [ label = "Addend" ]
    31 -> 33 [ label = "Addend" ]
    33 -> 34 [ label = "SltLhs" ]
    30 -> 34 [ label = "SltRhs" ]
    35 -> 36 [ label = "ConditionalJumpLoc" ]
    34 -> 36 [ label = "ConditionalJumpConditional" ]
    5 -> 37 [ label = "Duplicant" ]
    37 -> 38 [ label = "CalldataOffset" ]
    39 -> 40 [ label = "Duplicant" ]
    38 -> 41 [ label = "Duplicant" ]
    41 -> 42 [ label = "GtLhs" ]
    40 -> 42 [ label = "GtRhs" ]
    43 -> 44 [ label = "ConditionalJumpLoc" ]
    42 -> 44 [ label = "ConditionalJumpConditional" ]
    38 -> 47 [ label = "Duplicant" ]
    47 -> 48 [ label = "Addend" ]
    46 -> 48 [ label = "Addend" ]
    48 -> 49 [ label = "SltLhs" ]
    45 -> 49 [ label = "SltRhs" ]
    49 -> 50 [ label = "IsZero" ]
    51 -> 52 [ label = "ConditionalJumpLoc" ]
    50 -> 52 [ label = "ConditionalJumpConditional" ]
    38 -> 53 [ label = "Duplicant" ]
    5 -> 54 [ label = "Duplicant" ]
    54 -> 55 [ label = "Addend" ]
    53 -> 55 [ label = "Addend" ]
    55 -> 56 [ label = "CalldataOffset" ]
    56 -> 57 [ label = "Duplicant" ]
    57 -> 58 [ label = "GtLhs" ]
    39 -> 58 [ label = "GtRhs" ]
    59 -> 60 [ label = "ConditionalJumpLoc" ]
    58 -> 60 [ label = "ConditionalJumpConditional" ]
    61 -> 62 [ label = "Duplicant" ]
    38 -> 63 [ label = "Duplicant" ]
    63 -> 64 [ label = "Addend" ]
    62 -> 64 [ label = "Addend" ]
    61 -> 66 [ label = "Duplicant" ]
    56 -> 67 [ label = "Duplicant" ]
    38 -> 68 [ label = "Duplicant" ]
    68 -> 69 [ label = "Addend" ]
    67 -> 69 [ label = "Addend" ]
    69 -> 70 [ label = "Addend" ]
    66 -> 70 [ label = "Addend" ]
    70 -> 71 [ label = "GtLhs" ]
    65 -> 71 [ label = "GtRhs" ]
    72 -> 73 [ label = "ConditionalJumpLoc" ]
    71 -> 73 [ label = "ConditionalJumpConditional" ]
    56 -> 76 [ label = "Duplicant" ]
    76 -> 77 [ label = "EqLhs" ]
    75 -> 77 [ label = "EqRhs" ]
    78 -> 79 [ label = "JumpLoc" ]
    77 -> 80 [ label = "IsZero" ]
    81 -> 82 [ label = "ConditionalJumpLoc" ]
    80 -> 82 [ label = "ConditionalJumpConditional" ]
    84 -> 85 [ label = "MloadLoc" ]
    85 -> 87 [ label = "Duplicant" ]
    87 -> 88 [ label = "MstoreLoc" ]
    86 -> 88 [ label = "MstoreVal" ]
    85 -> 91 [ label = "Duplicant" ]
    91 -> 92 [ label = "Addend" ]
    90 -> 92 [ label = "Addend" ]
    92 -> 93 [ label = "MstoreLoc" ]
    89 -> 93 [ label = "MstoreVal" ]
    85 -> 96 [ label = "Duplicant" ]
    96 -> 97 [ label = "Addend" ]
    95 -> 97 [ label = "Addend" ]
    97 -> 98 [ label = "MstoreLoc" ]
    94 -> 98 [ label = "MstoreVal" ]
    85 -> 101 [ label = "Duplicant" ]
    101 -> 102 [ label = "Addend" ]
    100 -> 102 [ label = "Addend" ]
    102 -> 103 [ label = "MstoreLoc" ]
    99 -> 103 [ label = "MstoreVal" ]
    85 -> 104 [ label = "ReturnMemLoc" ]
    83 -> 104 [ label = "ReturnMemSize" ]
}
